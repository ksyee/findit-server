name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ghcr.io/ksyee/findit-server

jobs:
  #──────────────────────────────
  # 1) Build & Test
  #──────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: "gradle"  # 문자열이 필요합니다

      - run: ./gradlew build --no-daemon

      - name: Upload jar artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  #──────────────────────────────
  # 2) Docker Build & Push (GHCR)
  #──────────────────────────────
  docker:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3  # M1/ARM 지원(선택)
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest

  #──────────────────────────────
  # 3) Deploy to Production via SSH
  #──────────────────────────────
  deploy:
    needs: docker
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker stop findit || true && docker rm findit || true
            docker run -d --name findit --restart unless-stopped \
              -p 8080:8080 \
              --env-file /opt/findit/.env \
              ${{ env.IMAGE_NAME }}:${{ github.sha }}
