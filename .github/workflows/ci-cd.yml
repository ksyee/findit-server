  name: CI/CD

  on:
    push:
      branches: [ main ]
    pull_request:
      branches: [ main ]

  env:
    IMAGE_NAME: ghcr.io/ksyee/findit-server
    AWS_REGION: ${{ secrets.AWS_REGION }}
    PARAM_DB_URL: /findit/prod/datasource-url
    PARAM_DB_USERNAME: /findit/prod/datasource-username
    PARAM_DB_PASSWORD: /findit/prod/datasource-password
    PARAM_API_SECURITY_ENABLED: /findit/prod/api-security-enabled
    PARAM_API_SECURITY_KEY: /findit/prod/api-security-key
    PARAM_POLICE_API_ENABLED: /findit/prod/police-api-enabled

  jobs:
    test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: 21
            cache: gradle
        - name: Run tests
          run: ./gradlew test --no-daemon

    docker:
      needs: test
      if: github.event_name == 'push'
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
      steps:
        - uses: actions/checkout@v4
        - uses: docker/setup-buildx-action@v3
        - uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ secrets.GHCR_USERNAME }}
            password: ${{ secrets.GHCR_PAT }}
        - uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: |
              ${{ env.IMAGE_NAME }}:${{ github.sha }}
              ${{ env.IMAGE_NAME }}:latest
            cache-from: type=gha
            cache-to: type=gha,mode=max

    deploy:
      needs: docker
      if: github.event_name == 'push'
      runs-on: ubuntu-latest
      environment:
        name: production
      env:
        IMAGE_TAG: ${{ github.sha }}
        GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
        GHCR_PAT: ${{ secrets.GHCR_PAT }}
      steps:
        - name: SSH Deploy
          uses: appleboy/ssh-action@v1.0.3
          envs: IMAGE_NAME,IMAGE_TAG,AWS_REGION,PARAM_DB_URL,PARAM_DB_USERNAME,PARAM_DB_PASSWORD,PARAM_API_SECURITY_ENABLED,PARAM_API_SECURITY_KEY,PARAM_POLICE_API_ENABLED,GHCR_USERNAME,GHCR_PAT
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_KEY }}
            script: |
              set -euo pipefail

              docker login ghcr.io -u "$GHCR_USERNAME" -p "$GHCR_PAT"

              DB_URL=$(aws ssm get-parameter --region "$AWS_REGION" --name "$PARAM_DB_URL" --query 'Parameter.Value' --output text)
              DB_USERNAME=$(aws ssm get-parameter --region "$AWS_REGION" --name "$PARAM_DB_USERNAME" --query 'Parameter.Value' --output text)
              DB_PASSWORD=$(aws ssm get-parameter --region "$AWS_REGION" --name "$PARAM_DB_PASSWORD" --with-decryption --query 'Parameter.Value' --output text)
              API_SECURITY_ENABLED=$(aws ssm get-parameter --region "$AWS_REGION" --name "$PARAM_API_SECURITY_ENABLED" --query 'Parameter.Value' --output text)
              API_SECURITY_KEY=$(aws ssm get-parameter --region "$AWS_REGION" --name "$PARAM_API_SECURITY_KEY" --with-decryption --query 'Parameter.Value' --output text)
              POLICE_API_ENABLED=$(aws ssm get-parameter --region "$AWS_REGION" --name "$PARAM_POLICE_API_ENABLED" --query 'Parameter.Value' --output text)

              docker pull "$IMAGE_NAME:$IMAGE_TAG"

              docker stop findit || true
              docker rm findit || true

              docker run -d \
                --name findit \
                --restart unless-stopped \
                -p 8080:8080 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SPRING_DATASOURCE_URL="$DB_URL" \
                -e SPRING_DATASOURCE_USERNAME="$DB_USERNAME" \
                -e SPRING_DATASOURCE_PASSWORD="$DB_PASSWORD" \
                -e API_SECURITY_ENABLED="$API_SECURITY_ENABLED" \
                -e API_SECURITY_KEY="$API_SECURITY_KEY" \
                -e POLICE_API_ENABLED="$POLICE_API_ENABLED" \
                "$IMAGE_NAME:$IMAGE_TAG"

              echo "Waiting for application to start..."
              for i in {1..24}; do
                sleep 5
                if curl -s -f http://localhost:8080/api/health > /dev/null 2>&1; then
                  echo "✅ Health check passed!"
                  curl http://localhost:8080/api/health
                  break
                fi
                if [ $i -eq 24 ]; then
                  echo "❌ Health check failed after 120 seconds"
                  docker ps -a | grep findit || true
                  docker logs findit --tail 50 || true
                  exit 1
                fi
                echo "Attempt $i/24: Waiting for application to start..."
              done

              docker image prune -f
