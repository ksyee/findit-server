  name: CI/CD

  on:
    push:
      branches: [ main ]
    pull_request:
      branches: [ main ]

  env:
    IMAGE_NAME: ghcr.io/ksyee/findit-server

  jobs:
    #──────────────────────────────
    # 1) Test만 실행
    #──────────────────────────────
    test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: 21
            cache: gradle

        - name: Run tests
          run: ./gradlew test --no-daemon

    #──────────────────────────────
    # 2) Docker Build & Push (GHCR)
    #──────────────────────────────
    docker:
      needs: test
      if: github.event_name == 'push'
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
      steps:
        - uses: actions/checkout@v4

        - uses: docker/setup-buildx-action@v3

        - uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: |
              ${{ env.IMAGE_NAME }}:${{ github.sha }}
              ${{ env.IMAGE_NAME }}:latest
            cache-from: type=gha
            cache-to: type=gha,mode=max

    #──────────────────────────────
    # 3) Deploy to EC2 via SSH
    #──────────────────────────────
    deploy:
      needs: docker
      if: github.event_name == 'push'
      runs-on: ubuntu-latest
      environment:
        name: production
      steps:
        - name: SSH Deploy
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_KEY }}
            script: |
              # Docker 이미지 pull
              docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}

              # 기존 컨테이너 중지 및 제거
              docker stop findit || true
              docker rm findit || true

              # 새 컨테이너 실행
              docker run -d \
                --name findit \
                --restart unless-stopped \
                -p 8080:8080 \
                -e SPRING_PROFILES_ACTIVE=prod \
                ${{ env.IMAGE_NAME }}:${{ github.sha }}

              # 헬스체크 (최대 60초 대기)
              echo "Waiting for application to start..."
              for i in {1..12}; do
                sleep 5
                if curl -f http://localhost:8080/api/health; then
                  echo "✅ Health check passed!"
                  break
                fi
                if [ $i -eq 12 ]; then
                  echo "❌ Health check failed after 60 seconds"
                  docker logs findit
                  exit 1
                fi
                echo "Attempt $i/12 failed, retrying..."
              done

              # 구버전 이미지 정리
              docker image prune -f
