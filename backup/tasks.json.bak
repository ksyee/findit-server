{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Spring Boot Project and Database Connection",
      "description": "Initialize the Spring Boot application and configure database connection to the existing database with 'lost_item' and 'find_item' tables.",
      "details": "1. Create a new Spring Boot project using Spring Initializr\n2. Add dependencies: spring-boot-starter-data-jpa, spring-boot-starter-web, database driver\n3. Configure application.properties/yml with database connection details:\n```properties\nspring.datasource.url=jdbc:mysql://localhost:3306/lostfound_db\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.jpa.hibernate.ddl-auto=validate\nspring.jpa.show-sql=true\n```\n4. Create a DatabaseConfig class if additional configuration is needed\n5. Set up connection pooling with appropriate settings\n6. Implement basic health check to verify database connectivity",
      "testStrategy": "1. Create integration tests to verify database connection\n2. Test connection pool settings under load\n3. Verify that the application can connect to the database and validate the existing schema\n4. Create a simple repository test to confirm entity mapping is working correctly",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Create Entity Models and Repository Layer",
      "description": "Define entity models that map to existing 'lost_item' and 'find_item' tables and implement JPA repositories for data access.",
      "details": "1. Create LostItem entity class:\n```java\n@Entity\n@Table(name = \"lost_item\")\npublic class LostItem {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String itemType;\n    private String location;\n    private LocalDateTime lostDate;\n    private String description;\n    private String status;\n    private String contactInfo;\n    // Add other fields based on existing schema\n    // Add getters, setters, constructors\n}\n```\n\n2. Create FoundItem entity class:\n```java\n@Entity\n@Table(name = \"find_item\")\npublic class FoundItem {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String itemType;\n    private String location;\n    private LocalDateTime foundDate;\n    private String description;\n    private String status;\n    private String contactInfo;\n    // Add other fields based on existing schema\n    // Add getters, setters, constructors\n}\n```\n\n3. Create repository interfaces:\n```java\npublic interface LostItemRepository extends JpaRepository<LostItem, Long> {\n    List<LostItem> findByItemType(String itemType);\n    List<LostItem> findByLocationContaining(String location);\n    // Add custom query methods as needed\n}\n\npublic interface FoundItemRepository extends JpaRepository<FoundItem, Long> {\n    List<FoundItem> findByItemType(String itemType);\n    List<FoundItem> findByLocationContaining(String location);\n    // Add custom query methods as needed\n}\n```",
      "testStrategy": "1. Create unit tests for entity classes to verify field mappings\n2. Test repository methods with H2 in-memory database\n3. Verify custom query methods return expected results\n4. Test edge cases like null values and special characters in queries",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "in-progress",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Implement External API Client for Police Agency",
      "description": "Create client components to communicate with the Korean National Police Agency's public data APIs for lost and found items.",
      "details": "1. Create configuration class for API client:\n```java\n@Configuration\npublic class ApiClientConfig {\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplateBuilder()\n            .setConnectTimeout(Duration.ofSeconds(5))\n            .setReadTimeout(Duration.ofSeconds(30))\n            .build();\n    }\n}\n```\n\n2. Create DTO classes for external API responses:\n```java\n@Data\npublic class PoliceApiLostItemResponse {\n    private List<PoliceApiLostItem> items;\n    // Other response metadata\n}\n\n@Data\npublic class PoliceApiLostItem {\n    // Fields matching the external API response\n}\n\n// Similar classes for found items\n```\n\n3. Implement API client service:\n```java\n@Service\npublic class PoliceApiClient {\n    private final RestTemplate restTemplate;\n    private final String lostItemsApiUrl;\n    private final String foundItemsApiUrl;\n    \n    public PoliceApiClient(RestTemplate restTemplate, @Value(\"${police.api.lost-items-url}\") String lostItemsApiUrl,\n                          @Value(\"${police.api.found-items-url}\") String foundItemsApiUrl) {\n        this.restTemplate = restTemplate;\n        this.lostItemsApiUrl = lostItemsApiUrl;\n        this.foundItemsApiUrl = foundItemsApiUrl;\n    }\n    \n    public List<PoliceApiLostItem> fetchLostItems() {\n        ResponseEntity<PoliceApiLostItemResponse> response = \n            restTemplate.getForEntity(lostItemsApiUrl, PoliceApiLostItemResponse.class);\n        return response.getBody().getItems();\n    }\n    \n    public List<PoliceApiFoundItem> fetchFoundItems() {\n        ResponseEntity<PoliceApiFoundItemResponse> response = \n            restTemplate.getForEntity(foundItemsApiUrl, PoliceApiFoundItemResponse.class);\n        return response.getBody().getItems();\n    }\n}\n```\n\n4. Add error handling and retry logic for API failures",
      "testStrategy": "1. Create mock server to simulate Police API responses\n2. Test successful API calls and response parsing\n3. Test error handling with simulated API failures\n4. Verify retry logic works as expected\n5. Test timeout handling",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "in-progress",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Develop Data Mapping Service",
      "description": "Create a service to map data from external Police Agency API format to internal entity models.",
      "details": "1. Create mapper interfaces and implementations:\n```java\npublic interface DataMapper<S, T> {\n    T map(S source);\n    List<T> mapList(List<S> sources);\n}\n\n@Component\npublic class LostItemMapper implements DataMapper<PoliceApiLostItem, LostItem> {\n    @Override\n    public LostItem map(PoliceApiLostItem source) {\n        LostItem target = new LostItem();\n        target.setItemType(source.getItemType());\n        target.setLocation(source.getLocation());\n        target.setLostDate(parseDate(source.getLostDate()));\n        target.setDescription(source.getDescription());\n        target.setStatus(source.getStatus());\n        target.setContactInfo(source.getContactInfo());\n        // Map other fields\n        return target;\n    }\n    \n    @Override\n    public List<LostItem> mapList(List<PoliceApiLostItem> sources) {\n        return sources.stream().map(this::map).collect(Collectors.toList());\n    }\n    \n    private LocalDateTime parseDate(String dateString) {\n        // Implement date parsing logic based on API response format\n    }\n}\n\n// Similar implementation for FoundItemMapper\n```\n\n2. Create utility methods for handling special cases in data mapping\n3. Implement validation logic to ensure all required fields are properly mapped",
      "testStrategy": "1. Unit test each mapper with various input scenarios\n2. Test mapping of edge cases (null values, special characters)\n3. Verify date parsing logic works correctly\n4. Test list mapping functionality\n5. Verify validation logic correctly identifies invalid data",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement Data Deduplication System",
      "description": "Create a service to detect and prevent duplicate records when importing data from the external API.",
      "details": "1. Create a DeduplicationService:\n```java\n@Service\npublic class DeduplicationService {\n    private final LostItemRepository lostItemRepository;\n    private final FoundItemRepository foundItemRepository;\n    \n    public DeduplicationService(LostItemRepository lostItemRepository, \n                              FoundItemRepository foundItemRepository) {\n        this.lostItemRepository = lostItemRepository;\n        this.foundItemRepository = foundItemRepository;\n    }\n    \n    public boolean isLostItemDuplicate(LostItem item) {\n        // Implement logic to check if this item already exists\n        // Consider checking multiple fields like item type, description, lost date, location\n        return lostItemRepository.existsByItemTypeAndDescriptionAndLostDateAndLocation(\n            item.getItemType(), item.getDescription(), item.getLostDate(), item.getLocation());\n    }\n    \n    public boolean isFoundItemDuplicate(FoundItem item) {\n        // Similar implementation for found items\n    }\n    \n    public List<LostItem> filterDuplicateLostItems(List<LostItem> items) {\n        return items.stream()\n            .filter(item -> !isLostItemDuplicate(item))\n            .collect(Collectors.toList());\n    }\n    \n    public List<FoundItem> filterDuplicateFoundItems(List<FoundItem> items) {\n        // Similar implementation for found items\n    }\n}\n```\n\n2. Add custom repository methods to efficiently check for duplicates\n3. Consider using database constraints or unique indexes for additional protection\n4. Implement logging for duplicate detection events",
      "testStrategy": "1. Unit test duplicate detection logic with various scenarios\n2. Test with identical items to verify detection\n3. Test with slightly different items to verify non-duplication\n4. Performance test with large datasets\n5. Test edge cases like items with minimal data",
      "priority": "high",
      "dependencies": [
        2,
        4
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Scheduled Data Collection Service",
      "description": "Create a scheduled service that runs every 2 hours to fetch new data from the Police Agency APIs, deduplicate it, and store it in the database.",
      "details": "1. Enable scheduling in the application:\n```java\n@SpringBootApplication\n@EnableScheduling\npublic class LostFoundApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(LostFoundApplication.class, args);\n    }\n}\n```\n\n2. Implement the data collection service:\n```java\n@Service\npublic class DataCollectionService {\n    private static final Logger logger = LoggerFactory.getLogger(DataCollectionService.class);\n    \n    private final PoliceApiClient apiClient;\n    private final LostItemMapper lostItemMapper;\n    private final FoundItemMapper foundItemMapper;\n    private final DeduplicationService deduplicationService;\n    private final LostItemRepository lostItemRepository;\n    private final FoundItemRepository foundItemRepository;\n    \n    // Constructor with dependencies\n    \n    @Scheduled(fixedRate = 7200000) // 2 hours in milliseconds\n    public void collectLostItems() {\n        try {\n            logger.info(\"Starting lost items data collection\");\n            List<PoliceApiLostItem> apiItems = apiClient.fetchLostItems();\n            List<LostItem> mappedItems = lostItemMapper.mapList(apiItems);\n            List<LostItem> newItems = deduplicationService.filterDuplicateLostItems(mappedItems);\n            \n            if (!newItems.isEmpty()) {\n                lostItemRepository.saveAll(newItems);\n                logger.info(\"Saved {} new lost items\", newItems.size());\n            } else {\n                logger.info(\"No new lost items to save\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error collecting lost items\", e);\n        }\n    }\n    \n    @Scheduled(fixedRate = 7200000) // 2 hours in milliseconds\n    public void collectFoundItems() {\n        // Similar implementation for found items\n    }\n}\n```\n\n3. Configure error handling and retry logic\n4. Add metrics collection for monitoring\n5. Implement graceful shutdown handling",
      "testStrategy": "1. Create integration tests with mocked external API\n2. Test scheduling works correctly\n3. Verify error handling and recovery\n4. Test with simulated API failures\n5. Verify deduplication works in the scheduled context\n6. Test concurrent execution scenarios",
      "priority": "high",
      "dependencies": [
        3,
        4,
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Develop Lost Items API Endpoints",
      "description": "Implement RESTful API endpoints to search and retrieve lost item data with filtering capabilities.",
      "details": "1. Create a service layer for lost items:\n```java\n@Service\npublic class LostItemService {\n    private final LostItemRepository repository;\n    \n    public LostItemService(LostItemRepository repository) {\n        this.repository = repository;\n    }\n    \n    public List<LostItem> getAllLostItems() {\n        return repository.findAll();\n    }\n    \n    public LostItem getLostItemById(Long id) {\n        return repository.findById(id)\n            .orElseThrow(() -> new ResourceNotFoundException(\"Lost item not found with id: \" + id));\n    }\n    \n    public List<LostItem> searchLostItems(String itemType, String location, LocalDateTime fromDate, LocalDateTime toDate) {\n        // Implement search logic with criteria builder or custom repository methods\n    }\n}\n```\n\n2. Create DTO classes for API responses:\n```java\n@Data\npublic class LostItemDto {\n    private Long id;\n    private String itemType;\n    private String location;\n    private String lostDate;\n    private String description;\n    private String status;\n    private String contactInfo;\n    // Other fields\n}\n```\n\n3. Implement REST controller:\n```java\n@RestController\n@RequestMapping(\"/api/lost-items\")\npublic class LostItemController {\n    private final LostItemService service;\n    \n    public LostItemController(LostItemService service) {\n        this.service = service;\n    }\n    \n    @GetMapping\n    public ResponseEntity<List<LostItemDto>> getAllLostItems() {\n        List<LostItem> items = service.getAllLostItems();\n        List<LostItemDto> dtos = items.stream()\n            .map(this::convertToDto)\n            .collect(Collectors.toList());\n        return ResponseEntity.ok(dtos);\n    }\n    \n    @GetMapping(\"/{id}\")\n    public ResponseEntity<LostItemDto> getLostItemById(@PathVariable Long id) {\n        LostItem item = service.getLostItemById(id);\n        return ResponseEntity.ok(convertToDto(item));\n    }\n    \n    @GetMapping(\"/search\")\n    public ResponseEntity<List<LostItemDto>> searchLostItems(\n            @RequestParam(required = false) String itemType,\n            @RequestParam(required = false) String location,\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fromDate,\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime toDate) {\n        \n        List<LostItem> items = service.searchLostItems(itemType, location, fromDate, toDate);\n        List<LostItemDto> dtos = items.stream()\n            .map(this::convertToDto)\n            .collect(Collectors.toList());\n        return ResponseEntity.ok(dtos);\n    }\n    \n    private LostItemDto convertToDto(LostItem item) {\n        // Implement conversion logic\n    }\n}\n```\n\n4. Implement pagination support\n5. Add proper error handling and validation",
      "testStrategy": "1. Unit test service layer methods\n2. Test controller endpoints with MockMvc\n3. Verify filtering logic works correctly\n4. Test pagination and sorting\n5. Test error handling for invalid requests\n6. Verify response format matches requirements",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Develop Found Items API Endpoints",
      "description": "Implement RESTful API endpoints to search and retrieve found item data with filtering capabilities.",
      "details": "1. Create a service layer for found items:\n```java\n@Service\npublic class FoundItemService {\n    private final FoundItemRepository repository;\n    \n    public FoundItemService(FoundItemRepository repository) {\n        this.repository = repository;\n    }\n    \n    public List<FoundItem> getAllFoundItems() {\n        return repository.findAll();\n    }\n    \n    public FoundItem getFoundItemById(Long id) {\n        return repository.findById(id)\n            .orElseThrow(() -> new ResourceNotFoundException(\"Found item not found with id: \" + id));\n    }\n    \n    public List<FoundItem> searchFoundItems(String itemType, String location, LocalDateTime fromDate, LocalDateTime toDate) {\n        // Implement search logic with criteria builder or custom repository methods\n    }\n}\n```\n\n2. Create DTO classes for API responses:\n```java\n@Data\npublic class FoundItemDto {\n    private Long id;\n    private String itemType;\n    private String location;\n    private String foundDate;\n    private String description;\n    private String status;\n    private String contactInfo;\n    // Other fields\n}\n```\n\n3. Implement REST controller:\n```java\n@RestController\n@RequestMapping(\"/api/found-items\")\npublic class FoundItemController {\n    private final FoundItemService service;\n    \n    public FoundItemController(FoundItemService service) {\n        this.service = service;\n    }\n    \n    @GetMapping\n    public ResponseEntity<List<FoundItemDto>> getAllFoundItems() {\n        List<FoundItem> items = service.getAllFoundItems();\n        List<FoundItemDto> dtos = items.stream()\n            .map(this::convertToDto)\n            .collect(Collectors.toList());\n        return ResponseEntity.ok(dtos);\n    }\n    \n    @GetMapping(\"/{id}\")\n    public ResponseEntity<FoundItemDto> getFoundItemById(@PathVariable Long id) {\n        FoundItem item = service.getFoundItemById(id);\n        return ResponseEntity.ok(convertToDto(item));\n    }\n    \n    @GetMapping(\"/search\")\n    public ResponseEntity<List<FoundItemDto>> searchFoundItems(\n            @RequestParam(required = false) String itemType,\n            @RequestParam(required = false) String location,\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fromDate,\n            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime toDate) {\n        \n        List<FoundItem> items = service.searchFoundItems(itemType, location, fromDate, toDate);\n        List<FoundItemDto> dtos = items.stream()\n            .map(this::convertToDto)\n            .collect(Collectors.toList());\n        return ResponseEntity.ok(dtos);\n    }\n    \n    private FoundItemDto convertToDto(FoundItem item) {\n        // Implement conversion logic\n    }\n}\n```\n\n4. Implement pagination support\n5. Add proper error handling and validation",
      "testStrategy": "1. Unit test service layer methods\n2. Test controller endpoints with MockMvc\n3. Verify filtering logic works correctly\n4. Test pagination and sorting\n5. Test error handling for invalid requests\n6. Verify response format matches requirements",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Implement Error Handling and API Documentation",
      "description": "Create a global error handling system and implement API documentation using Swagger/OpenAPI.",
      "details": "1. Add Swagger dependencies to pom.xml or build.gradle:\n```xml\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-boot-starter</artifactId>\n    <version>3.0.0</version>\n</dependency>\n```\n\n2. Configure Swagger:\n```java\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n            .select()\n            .apis(RequestHandlerSelectors.basePackage(\"com.example.lostfound.controller\"))\n            .paths(PathSelectors.any())\n            .build()\n            .apiInfo(apiInfo());\n    }\n    \n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n            .title(\"Lost and Found Items API\")\n            .description(\"API for accessing lost and found items data from Korean National Police Agency\")\n            .version(\"1.0.0\")\n            .build();\n    }\n}\n```\n\n3. Implement global exception handler:\n```java\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(\"NOT_FOUND\", ex.getMessage());\n        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\n    }\n    \n    @ExceptionHandler(Exception.class)\n    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {\n        ErrorResponse error = new ErrorResponse(\"INTERNAL_SERVER_ERROR\", \"An unexpected error occurred\");\n        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n    \n    // Add more exception handlers as needed\n}\n\n@Data\n@AllArgsConstructor\npublic class ErrorResponse {\n    private String code;\n    private String message;\n}\n```\n\n4. Add Swagger annotations to controllers and DTOs\n5. Create example responses for documentation",
      "testStrategy": "1. Test global exception handler with various exceptions\n2. Verify correct HTTP status codes are returned\n3. Check that Swagger documentation is generated correctly\n4. Verify API examples work as expected\n5. Test error responses format",
      "priority": "medium",
      "dependencies": [
        7,
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Implement Monitoring and Health Checks",
      "description": "Add monitoring, metrics, and health check endpoints to ensure system reliability and provide visibility into the data collection process.",
      "details": "1. Add Actuator dependency:\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n2. Configure Actuator endpoints in application.properties:\n```properties\nmanagement.endpoints.web.exposure.include=health,info,metrics,prometheus\nmanagement.endpoint.health.show-details=always\n```\n\n3. Create custom health indicators:\n```java\n@Component\npublic class DataCollectionHealthIndicator implements HealthIndicator {\n    \n    private final DataCollectionService dataCollectionService;\n    \n    public DataCollectionHealthIndicator(DataCollectionService dataCollectionService) {\n        this.dataCollectionService = dataCollectionService;\n    }\n    \n    @Override\n    public Health health() {\n        if (dataCollectionService.isLastCollectionSuccessful()) {\n            return Health.up()\n                .withDetail(\"lastSuccessfulRun\", dataCollectionService.getLastSuccessfulRun())\n                .withDetail(\"itemsCollectedLastRun\", dataCollectionService.getItemsCollectedLastRun())\n                .build();\n        } else {\n            return Health.down()\n                .withDetail(\"lastFailedRun\", dataCollectionService.getLastFailedRun())\n                .withDetail(\"failureReason\", dataCollectionService.getLastFailureReason())\n                .build();\n        }\n    }\n}\n```\n\n4. Add metrics collection to key services:\n```java\n@Service\npublic class DataCollectionService {\n    private final MeterRegistry meterRegistry;\n    \n    // Other fields and constructor\n    \n    @Scheduled(fixedRate = 7200000)\n    public void collectLostItems() {\n        Timer.Sample sample = Timer.start(meterRegistry);\n        Counter counter = meterRegistry.counter(\"data.collection.lost.items.attempts\");\n        counter.increment();\n        \n        try {\n            // Existing collection logic\n            \n            meterRegistry.counter(\"data.collection.lost.items.success\").increment();\n            meterRegistry.gauge(\"data.collection.lost.items.count\", newItems.size());\n        } catch (Exception e) {\n            meterRegistry.counter(\"data.collection.lost.items.errors\").increment();\n            throw e;\n        } finally {\n            sample.stop(meterRegistry.timer(\"data.collection.lost.items.duration\"));\n        }\n    }\n}\n```\n\n5. Create a dashboard controller for administrative overview:\n```java\n@RestController\n@RequestMapping(\"/api/admin/dashboard\")\npublic class DashboardController {\n    private final LostItemRepository lostItemRepository;\n    private final FoundItemRepository foundItemRepository;\n    private final DataCollectionService dataCollectionService;\n    \n    // Constructor\n    \n    @GetMapping(\"/stats\")\n    public ResponseEntity<DashboardStats> getStats() {\n        DashboardStats stats = new DashboardStats();\n        stats.setTotalLostItems(lostItemRepository.count());\n        stats.setTotalFoundItems(foundItemRepository.count());\n        stats.setLastDataCollectionRun(dataCollectionService.getLastRunTime());\n        stats.setDataCollectionStatus(dataCollectionService.getStatus());\n        return ResponseEntity.ok(stats);\n    }\n}\n```",
      "testStrategy": "1. Test health endpoints return correct status\n2. Verify metrics are being recorded correctly\n3. Test dashboard endpoints with various system states\n4. Simulate failure scenarios to test monitoring\n5. Verify Actuator endpoints are secured appropriately",
      "priority": "low",
      "dependencies": [
        6
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}